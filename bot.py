import telebot
from telebot import types
import sqlite3
from datetime import datetime, timedelta
import pytz
import time
import threading



bot = telebot.TeleBot('7683658457:AAHi8DMJb1snxTE0EKsVA89HR3VOI19-uvI', parse_mode='Markdown')                  



TIMEZONE = pytz.timezone('Europe/Moscow')




def get_db():                                                       #–±–¥
    conn = sqlite3.connect('sirius_schedule.db', 
                         detect_types=sqlite3.PARSE_DECLTYPES,
                         check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn


with get_db() as conn:                                                 #–±–¥
    conn.execute("""
    CREATE TABLE IF NOT EXISTS schedule (
        id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        event_name TEXT NOT NULL,
        event_date TEXT NOT NULL,
        event_time TEXT NOT NULL,
        notified INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)


@bot.message_handler(commands=['start'])                       #–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–º–∞–Ω–¥–∞ /start
def main(message):
    bot.send_message(message.chat.id, '''‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!* ‚ú®

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥—Ä—É–≥! –Ø ‚Äî —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ö–∞–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫. üåü

–ü—Ä–µ–¥—Å—Ç–∞–≤—å: –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–±—ã—Ç—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–∞—Ä –∏–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω—ã—Ö "–æ–π, –∞ –≤–µ–¥—å —Å–µ–≥–æ–¥–Ω—è –∂–µ...". –Ø –±—É–¥—É —Ç–≤–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞–ø–æ–º–∏–Ω–∞—è –æ –≤–∞–∂–Ω–æ–º –∏ —Ö—Ä–∞–Ω—è –≤—Å–µ –ø–ª–∞–Ω—ã.

üí° *–°–µ–∫—Ä–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /help ‚Äî –∏ —è —Ä–∞—Å–∫—Ä–æ—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç —Ç–≤–æ–π –¥–µ–Ω—å –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–º –¥–æ –º–∏–Ω—É—Ç—ã!

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫! üöÄ''')


@bot.message_handler(commands=['help'])                                                #–∫–æ–º–∞–Ω–¥–∞ /help
def help_command(message):
    bot.send_message(message.chat.id, '''üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
/list - –í—Å–µ —Å–æ–±—ã—Ç–∏—è —Å ID
/today - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/tomorrow - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/week - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
/schedule - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
/del - –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
/delschedule -  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
''')


@bot.message_handler(commands=['schedule'])                                                 #–∫–æ–º–∞–Ω–¥–∞ /schedule
def help_command(message):
    bot.send_message(message.chat.id, '''üìù *–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:*
/add –ù–∞–∑–≤–∞–Ω–∏–µ –≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º
–ü—Ä–∏–º–µ—Ä: /add –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2025-07-10 14:30
''')
    

@bot.message_handler(commands=['delschedule'])                                          #–∫–æ–º–∞–Ω–¥–∞ /delschedule
def help_command(message):
    bot.send_message(message.chat.id, '''üóëÔ∏è *–§–æ—Ä–º–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:*
/del [ID]
–ü—Ä–∏–º–µ—Ä: /del 5
''')


@bot.message_handler(commands=['list'])                                  #–∫–æ–º–∞–Ω–¥–∞ /list
def handle_list(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –∏—Ö ID"""
    with get_db() as conn:
        events = conn.execute("""
            SELECT id, event_name, event_date, event_time 
            FROM schedule 
            WHERE user_id=?
            ORDER BY event_date, event_time
        """, (message.chat.id,)).fetchall()
    
    if not events:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        return
    
    response = "üìã *–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:*\n\n"
    for event in events:
        response += f"ID: {event['id']}\n"
        response += f"‚Ä¢ {event['event_date']} {event['event_time']} - {event['event_name']}\n\n"
    
    response += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /del [ID]"
    bot.send_message(message.chat.id, response)   


@bot.message_handler(commands=['today'])                                      #–∫–æ–º–∞–Ω–¥–∞ /today
def handle_today(message):
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    with get_db() as conn:
        events = conn.execute("""
            SELECT event_name, event_time 
            FROM schedule 
            WHERE user_id=? AND event_date=?
            ORDER BY event_time
        """, (message.chat.id, today)).fetchall()
    
    response = "*üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
    response += "\n".join(f"‚Ä¢ {e['event_time']} - {e['event_name']}" for e in events) if events else "üéâ –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å!"
    bot.send_message(message.chat.id, response)


@bot.message_handler(commands=['tomorrow'])                                       #–∫–æ–º–∞–Ω–¥–∞ /tomorrow
def handle_tomorrow(message):
    tomorrow = (datetime.now(TIMEZONE) + timedelta(days=1)).strftime("%Y-%m-%d")
    with get_db() as conn:
        events = conn.execute("""
            SELECT event_name, event_time 
            FROM schedule 
            WHERE user_id=? AND event_date=?
            ORDER BY event_time
        """, (message.chat.id, tomorrow)).fetchall()
    
    response = "*üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n\n"
    response += "\n".join(f"‚Ä¢ {e['event_time']} - {e['event_name']}" for e in events) if events else "üéâ –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å!"
    bot.send_message(message.chat.id, response)


@bot.message_handler(commands=['week'])                              #–∫–æ–º–∞–Ω–¥–∞ /week
def handle_week(message):
    today = datetime.now(TIMEZONE)
    week_later = today + timedelta(days=7)
    
    with get_db() as conn:
        events = conn.execute("""
            SELECT event_date, event_name, event_time 
            FROM schedule 
            WHERE user_id=? AND event_date BETWEEN ? AND ?
            ORDER BY event_date, event_time
        """, (message.chat.id, today.strftime("%Y-%m-%d"), week_later.strftime("%Y-%m-%d"))).fetchall()
    
    if not events:
        bot.send_message(message.chat.id, "üéâ –ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç!")
        return
    
    response = "*üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n"
    current_date = None
    
    for event in events:
        if event['event_date'] != current_date:
            current_date = event['event_date']
            date_obj = datetime.strptime(current_date, "%Y-%m-%d")
            response += f"*{date_obj.strftime('%A, %d %B')}:*\n"
        response += f"‚Ä¢ {event['event_time']} - {event['event_name']}\n"
    
    bot.send_message(message.chat.id, response)


@bot.message_handler(commands=['add'])                      #–∫–æ–º–∞–Ω–∞ add
def handle_add(message):
    try:
        parts = message.text.split(maxsplit=3)
        if len(parts) < 4:
            raise ValueError
        
        _, name, date, time = parts
        event_datetime = TIMEZONE.localize(
            datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
        )
        
        if event_datetime < datetime.now(TIMEZONE):
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º!")
            return
            
        with get_db() as conn:
            conn.execute("""
                INSERT INTO schedule (user_id, event_name, event_date, event_time)
                VALUES (?, ?, ?, ?)
            """, (message.chat.id, name, date, time))
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ *{name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"üìÖ *–î–∞—Ç–∞:* {date}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {time}\n\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é –∑–∞ 1 —á–∞—Å –¥–æ —Å–æ–±—ã—Ç–∏—è."
        )
    except ValueError:
        example_date = datetime.now(TIMEZONE).strftime('%Y-%m-%d')
        bot.send_message(
            message.chat.id,
            "‚ùå *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "`/add –ù–∞–∑–≤–∞–Ω–∏–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`\n\n"
            f"–ü—Ä–∏–º–µ—Ä: `/add –≠–∫–∑–∞–º–µ–Ω {example_date} 14:30`"
        )



@bot.message_handler(commands=['del'])                                     #–∫–æ–º–∞–Ω–¥–∞ del
def handle_delete(message):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ ID"""
    try:
        event_id = int(message.text.split()[1])
        
        with get_db() as conn:
            event = conn.execute("""
                SELECT id FROM schedule 
                WHERE id=? AND user_id=?
            """, (event_id, message.chat.id)).fetchone()
            
            if not event:
                bot.send_message(message.chat.id, "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!")
                return
            
            conn.execute("""
                DELETE FROM schedule 
                WHERE id=? AND user_id=?
            """, (event_id, message.chat.id))
            
        bot.send_message(message.chat.id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ ID {event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /del [ID]\n–ü—Ä–∏–º–µ—Ä: /del 5")



#–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def reminder_worker():
    while True:
        try:
            now = datetime.now(TIMEZONE)
            reminder_time = now + timedelta(hours=1)
            
            with get_db() as conn:
                events = conn.execute("""
                    SELECT id, user_id, event_name, event_time
                    FROM schedule
                    WHERE event_date=? AND event_time=? AND notified=0
                """, (reminder_time.strftime("%Y-%m-%d"), 
                    reminder_time.strftime("%H:%M"))).fetchall()
                
                for event in events:
                    try:
                        bot.send_message(
                            event['user_id'],
                            f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n"
                            f"–ß–µ—Ä–µ–∑ —á–∞—Å —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:\n"
                            f"*{event['event_name']}* –≤ {event['event_time']}\n\n"
                            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!"
                        )
                        conn.execute(
                            "UPDATE schedule SET notified=1 WHERE id=?",
                            (event['id'],)
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            
            time.sleep(60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            time.sleep(300)





if __name__ == "__main__":
    threading.Thread(
        target=reminder_worker,
        daemon=True,
        name="ReminderWorker"
    ).start()
    
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –í—Ä–µ–º—è –°–æ—á–∏:", datetime.now(TIMEZONE).strftime('%Y-%m-%d %H:%M'))
    bot.infinity_polling()